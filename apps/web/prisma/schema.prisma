// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Subject {
  id        String     @id @default(cuid())
  name      String     @unique
  about     String     @default("")
  parents   Subject[]  @relation("SubjectRelation")
  children  Subject[]  @relation("SubjectRelation")
  resources Resource[]
  tags      Tag[]
}

model Tag {
  id        String     @id @default(cuid())
  name      String
  about     String     @default("")
  subjectId String
  subject   Subject    @relation(fields: [subjectId], references: [id])
  resources Resource[]

  @@index([subjectId])
}

model Resource {
  id        String   @id @default(cuid())
  name      String
  url       String
  createdAt DateTime @default(now())
  reviews   Review[]
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  subjectId String
  subject   Subject  @relation(fields: [subjectId], references: [id])
  tags      Tag[]

  @@index([userId])
  @@index([subjectId])
}

model Review {
  id         String   @id @default(cuid())
  score      Int
  comment    String?  @db.Text
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])

  @@index([userId])
  @@index([resourceId])
}

model VaultSubject {
  id        String          @id @default(cuid())
  name      String
  about     String          @default("")
  parents   VaultSubject[]  @relation("VaultSubjectRelation")
  children  VaultSubject[]  @relation("VaultSubjectRelation")
  userId    String
  user      User            @relation(fields: [userId], references: [id])
  resources VaultResource[]
  tags      VaultTag[]

  @@unique([userId, name])
  @@unique([userId, id])
}

model VaultTag {
  id        String          @id @default(cuid())
  name      String
  about     String          @default("")
  subjectId String
  subject   VaultSubject    @relation(fields: [subjectId], references: [id])
  resources VaultResource[]

  @@index([subjectId])
}

model VaultResource {
  id        String       @id @default(cuid())
  name      String
  url       String       @db.Text
  createdAt DateTime     @default(now())
  score     Int?
  review    String       @default("") @db.Text
  subjectId String
  subject   VaultSubject @relation(fields: [subjectId], references: [id])
  tags      VaultTag[]

  @@index([subjectId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  resources     Resource[]
  reviews       Review[]
  VaultSubject  VaultSubject[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
